# coding: utf-8

"""
    RAI Cloud SDK

    This is a Client SDK for RAI Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputeInfoProtocol(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_name': 'str',
        'id': 'str',
        'created_by': 'str',
        'name': 'str',
        'size': 'str',
        'region': 'str',
        'infrastructure': 'str',
        'state': 'str',
        'requested_on': 'str',
        'created_on': 'str',
        'deleted_on': 'str',
        'message': 'str'
    }

    attribute_map = {
        'account_name': 'account_name',
        'id': 'id',
        'created_by': 'created_by',
        'name': 'name',
        'size': 'size',
        'region': 'region',
        'infrastructure': 'infrastructure',
        'state': 'state',
        'requested_on': 'requested_on',
        'created_on': 'created_on',
        'deleted_on': 'deleted_on',
        'message': 'message'
    }

    def __init__(self, account_name=None, id=None, created_by=None, name=None, size=None, region=None, infrastructure=None, state=None, requested_on=None, created_on=None, deleted_on=None, message=None, local_vars_configuration=None):  # noqa: E501
        """ComputeInfoProtocol - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_name = None
        self._id = None
        self._created_by = None
        self._name = None
        self._size = None
        self._region = None
        self._infrastructure = None
        self._state = None
        self._requested_on = None
        self._created_on = None
        self._deleted_on = None
        self._message = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if region is not None:
            self.region = region
        self.infrastructure = infrastructure
        if state is not None:
            self.state = state
        if requested_on is not None:
            self.requested_on = requested_on
        self.created_on = created_on
        self.deleted_on = deleted_on
        self.message = message

    @property
    def account_name(self):
        """Gets the account_name of this ComputeInfoProtocol.  # noqa: E501


        :return: The account_name of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ComputeInfoProtocol.


        :param account_name: The account_name of this ComputeInfoProtocol.  # noqa: E501
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def id(self):
        """Gets the id of this ComputeInfoProtocol.  # noqa: E501


        :return: The id of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputeInfoProtocol.


        :param id: The id of this ComputeInfoProtocol.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this ComputeInfoProtocol.  # noqa: E501


        :return: The created_by of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ComputeInfoProtocol.


        :param created_by: The created_by of this ComputeInfoProtocol.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def name(self):
        """Gets the name of this ComputeInfoProtocol.  # noqa: E501


        :return: The name of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputeInfoProtocol.


        :param name: The name of this ComputeInfoProtocol.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ComputeInfoProtocol.  # noqa: E501


        :return: The size of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ComputeInfoProtocol.


        :param size: The size of this ComputeInfoProtocol.  # noqa: E501
        :type size: str
        """

        self._size = size

    @property
    def region(self):
        """Gets the region of this ComputeInfoProtocol.  # noqa: E501


        :return: The region of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ComputeInfoProtocol.


        :param region: The region of this ComputeInfoProtocol.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def infrastructure(self):
        """Gets the infrastructure of this ComputeInfoProtocol.  # noqa: E501


        :return: The infrastructure of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._infrastructure

    @infrastructure.setter
    def infrastructure(self, infrastructure):
        """Sets the infrastructure of this ComputeInfoProtocol.


        :param infrastructure: The infrastructure of this ComputeInfoProtocol.  # noqa: E501
        :type infrastructure: str
        """

        self._infrastructure = infrastructure

    @property
    def state(self):
        """Gets the state of this ComputeInfoProtocol.  # noqa: E501


        :return: The state of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ComputeInfoProtocol.


        :param state: The state of this ComputeInfoProtocol.  # noqa: E501
        :type state: str
        """

        self._state = state

    @property
    def requested_on(self):
        """Gets the requested_on of this ComputeInfoProtocol.  # noqa: E501


        :return: The requested_on of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._requested_on

    @requested_on.setter
    def requested_on(self, requested_on):
        """Sets the requested_on of this ComputeInfoProtocol.


        :param requested_on: The requested_on of this ComputeInfoProtocol.  # noqa: E501
        :type requested_on: str
        """

        self._requested_on = requested_on

    @property
    def created_on(self):
        """Gets the created_on of this ComputeInfoProtocol.  # noqa: E501


        :return: The created_on of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ComputeInfoProtocol.


        :param created_on: The created_on of this ComputeInfoProtocol.  # noqa: E501
        :type created_on: str
        """

        self._created_on = created_on

    @property
    def deleted_on(self):
        """Gets the deleted_on of this ComputeInfoProtocol.  # noqa: E501


        :return: The deleted_on of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._deleted_on

    @deleted_on.setter
    def deleted_on(self, deleted_on):
        """Sets the deleted_on of this ComputeInfoProtocol.


        :param deleted_on: The deleted_on of this ComputeInfoProtocol.  # noqa: E501
        :type deleted_on: str
        """

        self._deleted_on = deleted_on

    @property
    def message(self):
        """Gets the message of this ComputeInfoProtocol.  # noqa: E501


        :return: The message of this ComputeInfoProtocol.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ComputeInfoProtocol.


        :param message: The message of this ComputeInfoProtocol.  # noqa: E501
        :type message: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeInfoProtocol):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputeInfoProtocol):
            return True

        return self.to_dict() != other.to_dict()
