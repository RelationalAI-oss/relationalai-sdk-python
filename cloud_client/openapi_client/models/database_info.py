# coding: utf-8

"""
    RAI Cloud SDK

    This is a Client SDK for RAI Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DatabaseInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_name': 'str',
        'name': 'str',
        'region': 'str',
        'id': 'str',
        'created_by': 'str',
        'default_compute_name': 'str',
        'state': 'str'
    }

    attribute_map = {
        'account_name': 'account_name',
        'name': 'name',
        'region': 'region',
        'id': 'id',
        'created_by': 'created_by',
        'default_compute_name': 'default_compute_name',
        'state': 'state'
    }

    def __init__(self, account_name=None, name=None, region=None, id=None, created_by=None, default_compute_name=None, state=None, local_vars_configuration=None):  # noqa: E501
        """DatabaseInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_name = None
        self._name = None
        self._region = None
        self._id = None
        self._created_by = None
        self._default_compute_name = None
        self._state = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        self.default_compute_name = default_compute_name
        if state is not None:
            self.state = state

    @property
    def account_name(self):
        """Gets the account_name of this DatabaseInfo.  # noqa: E501


        :return: The account_name of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DatabaseInfo.


        :param account_name: The account_name of this DatabaseInfo.  # noqa: E501
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def name(self):
        """Gets the name of this DatabaseInfo.  # noqa: E501


        :return: The name of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseInfo.


        :param name: The name of this DatabaseInfo.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this DatabaseInfo.  # noqa: E501


        :return: The region of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DatabaseInfo.


        :param region: The region of this DatabaseInfo.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def id(self):
        """Gets the id of this DatabaseInfo.  # noqa: E501


        :return: The id of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatabaseInfo.


        :param id: The id of this DatabaseInfo.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this DatabaseInfo.  # noqa: E501


        :return: The created_by of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DatabaseInfo.


        :param created_by: The created_by of this DatabaseInfo.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def default_compute_name(self):
        """Gets the default_compute_name of this DatabaseInfo.  # noqa: E501


        :return: The default_compute_name of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_compute_name

    @default_compute_name.setter
    def default_compute_name(self, default_compute_name):
        """Sets the default_compute_name of this DatabaseInfo.


        :param default_compute_name: The default_compute_name of this DatabaseInfo.  # noqa: E501
        :type default_compute_name: str
        """

        self._default_compute_name = default_compute_name

    @property
    def state(self):
        """Gets the state of this DatabaseInfo.  # noqa: E501


        :return: The state of this DatabaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DatabaseInfo.


        :param state: The state of this DatabaseInfo.  # noqa: E501
        :type state: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabaseInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatabaseInfo):
            return True

        return self.to_dict() != other.to_dict()
