"""
    RAI Cloud SDK

    This is a Client SDK for RAI Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_cloud_client.api_client import ApiClient, Endpoint
from openapi_cloud_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_cloud_client.model.create_compute_request_protocol import CreateComputeRequestProtocol
from openapi_cloud_client.model.create_compute_response_protocol import CreateComputeResponseProtocol
from openapi_cloud_client.model.create_user_request_protocol import CreateUserRequestProtocol
from openapi_cloud_client.model.create_user_response_protocol import CreateUserResponseProtocol
from openapi_cloud_client.model.delete_compute_request_protocol import DeleteComputeRequestProtocol
from openapi_cloud_client.model.delete_compute_response_protocol import DeleteComputeResponseProtocol
from openapi_cloud_client.model.get_account_credits_response import GetAccountCreditsResponse
from openapi_cloud_client.model.list_compute_events_response import ListComputeEventsResponse
from openapi_cloud_client.model.list_computes_response_protocol import ListComputesResponseProtocol
from openapi_cloud_client.model.list_databases_response_protocol import ListDatabasesResponseProtocol
from openapi_cloud_client.model.list_users_response_protocol import ListUsersResponseProtocol
from openapi_cloud_client.model.update_database_request_protocol import UpdateDatabaseRequestProtocol


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __account_credits_get(
            self,
            **kwargs
        ):
            """Get account credits consumption  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.account_credits_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                period (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetAccountCreditsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.account_credits_get = Endpoint(
            settings={
                'response_type': (GetAccountCreditsResponse,),
                'auth': [],
                'endpoint_path': '/account/credits',
                'operation_id': 'account_credits_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'period',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'period',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('period',): {

                        "CURRENT_MONTH": "current_month",
                        "PREVIOUS_MONTH": "previous_month"
                    },
                },
                'openapi_types': {
                    'period':
                        (str,),
                },
                'attribute_map': {
                    'period': 'period',
                },
                'location_map': {
                    'period': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__account_credits_get
        )

        def __compute_delete(
            self,
            delete_compute_request_protocol,
            **kwargs
        ):
            """Delete compute  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compute_delete(delete_compute_request_protocol, async_req=True)
            >>> result = thread.get()

            Args:
                delete_compute_request_protocol (DeleteComputeRequestProtocol): Compute to be deleted

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeleteComputeResponseProtocol
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['delete_compute_request_protocol'] = \
                delete_compute_request_protocol
            return self.call_with_http_info(**kwargs)

        self.compute_delete = Endpoint(
            settings={
                'response_type': (DeleteComputeResponseProtocol,),
                'auth': [],
                'endpoint_path': '/compute',
                'operation_id': 'compute_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_compute_request_protocol',
                ],
                'required': [
                    'delete_compute_request_protocol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_compute_request_protocol':
                        (DeleteComputeRequestProtocol,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_compute_request_protocol': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__compute_delete
        )

        def __compute_get(
            self,
            **kwargs
        ):
            """List computes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compute_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([str]): [optional]
                name ([str]): [optional]
                size ([str]): [optional]
                state ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListComputesResponseProtocol
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.compute_get = Endpoint(
            settings={
                'response_type': (ListComputesResponseProtocol,),
                'auth': [],
                'endpoint_path': '/compute',
                'operation_id': 'compute_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'name',
                    'size',
                    'state',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                    'name',
                    'size',
                    'state',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'max_items': 50,
                    },
                    ('name',): {

                        'max_items': 50,
                    },
                    ('size',): {

                        'max_items': 50,
                    },
                    ('state',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        ([str],),
                    'name':
                        ([str],),
                    'size':
                        ([str],),
                    'state':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'name': 'name',
                    'size': 'size',
                    'state': 'state',
                },
                'location_map': {
                    'id': 'query',
                    'name': 'query',
                    'size': 'query',
                    'state': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'name': 'multi',
                    'size': 'multi',
                    'state': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__compute_get
        )

        def __compute_put(
            self,
            create_compute_request_protocol,
            **kwargs
        ):
            """Create compute  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compute_put(create_compute_request_protocol, async_req=True)
            >>> result = thread.get()

            Args:
                create_compute_request_protocol (CreateComputeRequestProtocol): New compute

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateComputeResponseProtocol
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_compute_request_protocol'] = \
                create_compute_request_protocol
            return self.call_with_http_info(**kwargs)

        self.compute_put = Endpoint(
            settings={
                'response_type': (CreateComputeResponseProtocol,),
                'auth': [],
                'endpoint_path': '/compute',
                'operation_id': 'compute_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_compute_request_protocol',
                ],
                'required': [
                    'create_compute_request_protocol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_compute_request_protocol':
                        (CreateComputeRequestProtocol,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_compute_request_protocol': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__compute_put
        )

        def __database_get(
            self,
            **kwargs
        ):
            """List databases  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.database_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                id ([str]): [optional]
                name ([str]): [optional]
                state ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListDatabasesResponseProtocol
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.database_get = Endpoint(
            settings={
                'response_type': (ListDatabasesResponseProtocol,),
                'auth': [],
                'endpoint_path': '/database',
                'operation_id': 'database_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'name',
                    'state',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'id',
                    'name',
                    'state',
                ]
            },
            root_map={
                'validations': {
                    ('id',): {

                        'max_items': 50,
                    },
                    ('name',): {

                        'max_items': 50,
                    },
                    ('state',): {

                        'max_items': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        ([str],),
                    'name':
                        ([str],),
                    'state':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'name': 'name',
                    'state': 'state',
                },
                'location_map': {
                    'id': 'query',
                    'name': 'query',
                    'state': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'name': 'multi',
                    'state': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__database_get
        )

        def __database_post(
            self,
            update_database_request_protocol,
            **kwargs
        ):
            """Update database  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.database_post(update_database_request_protocol, async_req=True)
            >>> result = thread.get()

            Args:
                update_database_request_protocol (UpdateDatabaseRequestProtocol): Database fields to be updated

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['update_database_request_protocol'] = \
                update_database_request_protocol
            return self.call_with_http_info(**kwargs)

        self.database_post = Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/database',
                'operation_id': 'database_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_database_request_protocol',
                ],
                'required': [
                    'update_database_request_protocol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_database_request_protocol':
                        (UpdateDatabaseRequestProtocol,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_database_request_protocol': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__database_post
        )

        def __list_compute_events(
            self,
            compute_id,
            **kwargs
        ):
            """List compute events  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_compute_events(compute_id, async_req=True)
            >>> result = thread.get()

            Args:
                compute_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListComputeEventsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['compute_id'] = \
                compute_id
            return self.call_with_http_info(**kwargs)

        self.list_compute_events = Endpoint(
            settings={
                'response_type': (ListComputeEventsResponse,),
                'auth': [],
                'endpoint_path': '/compute/{computeId}/events',
                'operation_id': 'list_compute_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'compute_id',
                ],
                'required': [
                    'compute_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'compute_id':
                        (str,),
                },
                'attribute_map': {
                    'compute_id': 'computeId',
                },
                'location_map': {
                    'compute_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_compute_events
        )

        def __user_get(
            self,
            **kwargs
        ):
            """List users  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListUsersResponseProtocol
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.user_get = Endpoint(
            settings={
                'response_type': (ListUsersResponseProtocol,),
                'auth': [],
                'endpoint_path': '/user',
                'operation_id': 'user_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get
        )

        def __user_put(
            self,
            create_user_request_protocol,
            **kwargs
        ):
            """Create user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_put(create_user_request_protocol, async_req=True)
            >>> result = thread.get()

            Args:
                create_user_request_protocol (CreateUserRequestProtocol): New user

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateUserResponseProtocol
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_user_request_protocol'] = \
                create_user_request_protocol
            return self.call_with_http_info(**kwargs)

        self.user_put = Endpoint(
            settings={
                'response_type': (CreateUserResponseProtocol,),
                'auth': [],
                'endpoint_path': '/user',
                'operation_id': 'user_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_user_request_protocol',
                ],
                'required': [
                    'create_user_request_protocol',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_user_request_protocol':
                        (CreateUserRequestProtocol,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_user_request_protocol': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__user_put
        )
