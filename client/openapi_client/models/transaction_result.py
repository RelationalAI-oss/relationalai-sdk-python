# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TransactionResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aborted': 'bool',
        'actions': 'list[LabeledActionResult]',
        'debug_level': 'int',
        'output': 'list[Relation]',
        'problems': 'list[AbstractProblem]',
        'version': 'int',
        'type': 'str'
    }

    attribute_map = {
        'aborted': 'aborted',
        'actions': 'actions',
        'debug_level': 'debug_level',
        'output': 'output',
        'problems': 'problems',
        'version': 'version',
        'type': 'type'
    }

    def __init__(self, aborted=False, actions=None, debug_level=None, output=None, problems=None, version=None, type='TransactionResult', local_vars_configuration=None):  # noqa: E501
        """TransactionResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aborted = None
        self._actions = None
        self._debug_level = None
        self._output = None
        self._problems = None
        self._version = None
        self._type = None
        self.discriminator = None

        self.aborted = aborted
        self.actions = actions
        self.debug_level = debug_level
        self.output = output
        self.problems = problems
        self.version = version
        self.type = type

    @property
    def aborted(self):
        """Gets the aborted of this TransactionResult.  # noqa: E501


        :return: The aborted of this TransactionResult.  # noqa: E501
        :rtype: bool
        """
        return self._aborted

    @aborted.setter
    def aborted(self, aborted):
        """Sets the aborted of this TransactionResult.


        :param aborted: The aborted of this TransactionResult.  # noqa: E501
        :type aborted: bool
        """
        if self.local_vars_configuration.client_side_validation and aborted is None:  # noqa: E501
            raise ValueError("Invalid value for `aborted`, must not be `None`")  # noqa: E501

        self._aborted = aborted

    @property
    def actions(self):
        """Gets the actions of this TransactionResult.  # noqa: E501


        :return: The actions of this TransactionResult.  # noqa: E501
        :rtype: list[LabeledActionResult]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this TransactionResult.


        :param actions: The actions of this TransactionResult.  # noqa: E501
        :type actions: list[LabeledActionResult]
        """

        self._actions = actions

    @property
    def debug_level(self):
        """Gets the debug_level of this TransactionResult.  # noqa: E501


        :return: The debug_level of this TransactionResult.  # noqa: E501
        :rtype: int
        """
        return self._debug_level

    @debug_level.setter
    def debug_level(self, debug_level):
        """Sets the debug_level of this TransactionResult.


        :param debug_level: The debug_level of this TransactionResult.  # noqa: E501
        :type debug_level: int
        """

        self._debug_level = debug_level

    @property
    def output(self):
        """Gets the output of this TransactionResult.  # noqa: E501


        :return: The output of this TransactionResult.  # noqa: E501
        :rtype: list[Relation]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this TransactionResult.


        :param output: The output of this TransactionResult.  # noqa: E501
        :type output: list[Relation]
        """

        self._output = output

    @property
    def problems(self):
        """Gets the problems of this TransactionResult.  # noqa: E501


        :return: The problems of this TransactionResult.  # noqa: E501
        :rtype: list[AbstractProblem]
        """
        return self._problems

    @problems.setter
    def problems(self, problems):
        """Sets the problems of this TransactionResult.


        :param problems: The problems of this TransactionResult.  # noqa: E501
        :type problems: list[AbstractProblem]
        """

        self._problems = problems

    @property
    def version(self):
        """Gets the version of this TransactionResult.  # noqa: E501


        :return: The version of this TransactionResult.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransactionResult.


        :param version: The version of this TransactionResult.  # noqa: E501
        :type version: int
        """

        self._version = version

    @property
    def type(self):
        """Gets the type of this TransactionResult.  # noqa: E501


        :return: The type of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionResult.


        :param type: The type of this TransactionResult.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["TransactionResult"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionResult):
            return True

        return self.to_dict() != other.to_dict()
