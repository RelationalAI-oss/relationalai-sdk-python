# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LoadData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_type': 'str',
        'data': 'str',
        'file_schema': 'FileSchema',
        'file_syntax': 'FileSyntax',
        'integration': 'Integration',
        'key': 'object',
        'path': 'str',
        'type': 'str'
    }

    attribute_map = {
        'content_type': 'content_type',
        'data': 'data',
        'file_schema': 'file_schema',
        'file_syntax': 'file_syntax',
        'integration': 'integration',
        'key': 'key',
        'path': 'path',
        'type': 'type'
    }

    def __init__(self, content_type='', data=None, file_schema=None, file_syntax=None, integration=None, key=None, path=None, type='LoadData', local_vars_configuration=None):  # noqa: E501
        """LoadData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_type = None
        self._data = None
        self._file_schema = None
        self._file_syntax = None
        self._integration = None
        self._key = None
        self._path = None
        self._type = None
        self.discriminator = None

        self.content_type = content_type
        self.data = data
        if file_schema is not None:
            self.file_schema = file_schema
        if file_syntax is not None:
            self.file_syntax = file_syntax
        if integration is not None:
            self.integration = integration
        self.key = key
        self.path = path
        self.type = type

    @property
    def content_type(self):
        """Gets the content_type of this LoadData.  # noqa: E501


        :return: The content_type of this LoadData.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this LoadData.


        :param content_type: The content_type of this LoadData.  # noqa: E501
        :type content_type: str
        """
        if self.local_vars_configuration.client_side_validation and content_type is None:  # noqa: E501
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def data(self):
        """Gets the data of this LoadData.  # noqa: E501


        :return: The data of this LoadData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this LoadData.


        :param data: The data of this LoadData.  # noqa: E501
        :type data: str
        """

        self._data = data

    @property
    def file_schema(self):
        """Gets the file_schema of this LoadData.  # noqa: E501


        :return: The file_schema of this LoadData.  # noqa: E501
        :rtype: FileSchema
        """
        return self._file_schema

    @file_schema.setter
    def file_schema(self, file_schema):
        """Sets the file_schema of this LoadData.


        :param file_schema: The file_schema of this LoadData.  # noqa: E501
        :type file_schema: FileSchema
        """

        self._file_schema = file_schema

    @property
    def file_syntax(self):
        """Gets the file_syntax of this LoadData.  # noqa: E501


        :return: The file_syntax of this LoadData.  # noqa: E501
        :rtype: FileSyntax
        """
        return self._file_syntax

    @file_syntax.setter
    def file_syntax(self, file_syntax):
        """Sets the file_syntax of this LoadData.


        :param file_syntax: The file_syntax of this LoadData.  # noqa: E501
        :type file_syntax: FileSyntax
        """

        self._file_syntax = file_syntax

    @property
    def integration(self):
        """Gets the integration of this LoadData.  # noqa: E501


        :return: The integration of this LoadData.  # noqa: E501
        :rtype: Integration
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this LoadData.


        :param integration: The integration of this LoadData.  # noqa: E501
        :type integration: Integration
        """

        self._integration = integration

    @property
    def key(self):
        """Gets the key of this LoadData.  # noqa: E501


        :return: The key of this LoadData.  # noqa: E501
        :rtype: object
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LoadData.


        :param key: The key of this LoadData.  # noqa: E501
        :type key: object
        """

        self._key = key

    @property
    def path(self):
        """Gets the path of this LoadData.  # noqa: E501


        :return: The path of this LoadData.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LoadData.


        :param path: The path of this LoadData.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this LoadData.  # noqa: E501


        :return: The type of this LoadData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoadData.


        :param type: The type of this LoadData.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["LoadData"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoadData):
            return True

        return self.to_dict() != other.to_dict()
