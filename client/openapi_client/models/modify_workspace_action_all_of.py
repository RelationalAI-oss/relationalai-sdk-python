# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ModifyWorkspaceActionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delete_edb': 'str',
        'delete_source': 'list[str]',
        'enable_library': 'str'
    }

    attribute_map = {
        'delete_edb': 'delete_edb',
        'delete_source': 'delete_source',
        'enable_library': 'enable_library'
    }

    def __init__(self, delete_edb=None, delete_source=None, enable_library=None, local_vars_configuration=None):  # noqa: E501
        """ModifyWorkspaceActionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delete_edb = None
        self._delete_source = None
        self._enable_library = None
        self.discriminator = None

        self.delete_edb = delete_edb
        self.delete_source = delete_source
        self.enable_library = enable_library

    @property
    def delete_edb(self):
        """Gets the delete_edb of this ModifyWorkspaceActionAllOf.  # noqa: E501


        :return: The delete_edb of this ModifyWorkspaceActionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._delete_edb

    @delete_edb.setter
    def delete_edb(self, delete_edb):
        """Sets the delete_edb of this ModifyWorkspaceActionAllOf.


        :param delete_edb: The delete_edb of this ModifyWorkspaceActionAllOf.  # noqa: E501
        :type delete_edb: str
        """

        self._delete_edb = delete_edb

    @property
    def delete_source(self):
        """Gets the delete_source of this ModifyWorkspaceActionAllOf.  # noqa: E501


        :return: The delete_source of this ModifyWorkspaceActionAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._delete_source

    @delete_source.setter
    def delete_source(self, delete_source):
        """Sets the delete_source of this ModifyWorkspaceActionAllOf.


        :param delete_source: The delete_source of this ModifyWorkspaceActionAllOf.  # noqa: E501
        :type delete_source: list[str]
        """

        self._delete_source = delete_source

    @property
    def enable_library(self):
        """Gets the enable_library of this ModifyWorkspaceActionAllOf.  # noqa: E501


        :return: The enable_library of this ModifyWorkspaceActionAllOf.  # noqa: E501
        :rtype: str
        """
        return self._enable_library

    @enable_library.setter
    def enable_library(self, enable_library):
        """Sets the enable_library of this ModifyWorkspaceActionAllOf.


        :param enable_library: The enable_library of this ModifyWorkspaceActionAllOf.  # noqa: E501
        :type enable_library: str
        """

        self._enable_library = enable_library

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyWorkspaceActionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyWorkspaceActionAllOf):
            return True

        return self.to_dict() != other.to_dict()
