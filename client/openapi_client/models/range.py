# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Range(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'area': 'Area',
        'end_byte': 'int',
        'input': 'object',
        'start_byte': 'int',
        'type': 'str'
    }

    attribute_map = {
        'area': 'area',
        'end_byte': 'end_byte',
        'input': 'input',
        'start_byte': 'start_byte',
        'type': 'type'
    }

    def __init__(self, area=None, end_byte=0, input=None, start_byte=0, type='Range', local_vars_configuration=None):  # noqa: E501
        """Range - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._area = None
        self._end_byte = None
        self._input = None
        self._start_byte = None
        self._type = None
        self.discriminator = None

        self.area = area
        self.end_byte = end_byte
        self.input = input
        self.start_byte = start_byte
        self.type = type

    @property
    def area(self):
        """Gets the area of this Range.  # noqa: E501


        :return: The area of this Range.  # noqa: E501
        :rtype: Area
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Range.


        :param area: The area of this Range.  # noqa: E501
        :type area: Area
        """
        if self.local_vars_configuration.client_side_validation and area is None:  # noqa: E501
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501

        self._area = area

    @property
    def end_byte(self):
        """Gets the end_byte of this Range.  # noqa: E501


        :return: The end_byte of this Range.  # noqa: E501
        :rtype: int
        """
        return self._end_byte

    @end_byte.setter
    def end_byte(self, end_byte):
        """Sets the end_byte of this Range.


        :param end_byte: The end_byte of this Range.  # noqa: E501
        :type end_byte: int
        """
        if self.local_vars_configuration.client_side_validation and end_byte is None:  # noqa: E501
            raise ValueError("Invalid value for `end_byte`, must not be `None`")  # noqa: E501

        self._end_byte = end_byte

    @property
    def input(self):
        """Gets the input of this Range.  # noqa: E501


        :return: The input of this Range.  # noqa: E501
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this Range.


        :param input: The input of this Range.  # noqa: E501
        :type input: object
        """

        self._input = input

    @property
    def start_byte(self):
        """Gets the start_byte of this Range.  # noqa: E501


        :return: The start_byte of this Range.  # noqa: E501
        :rtype: int
        """
        return self._start_byte

    @start_byte.setter
    def start_byte(self, start_byte):
        """Sets the start_byte of this Range.


        :param start_byte: The start_byte of this Range.  # noqa: E501
        :type start_byte: int
        """
        if self.local_vars_configuration.client_side_validation and start_byte is None:  # noqa: E501
            raise ValueError("Invalid value for `start_byte`, must not be `None`")  # noqa: E501

        self._start_byte = start_byte

    @property
    def type(self):
        """Gets the type of this Range.  # noqa: E501


        :return: The type of this Range.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Range.


        :param type: The type of this Range.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Range"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Range):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Range):
            return True

        return self.to_dict() != other.to_dict()
