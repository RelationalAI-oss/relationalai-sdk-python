# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Transaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abort': 'bool',
        'actions': 'list[LabeledAction]',
        'dbname': 'str',
        'debug_level': 'int',
        'mode': 'str',
        'nowait_durable': 'bool',
        'readonly': 'bool',
        'source_dbname': 'str',
        'version': 'int',
        'type': 'str'
    }

    attribute_map = {
        'abort': 'abort',
        'actions': 'actions',
        'dbname': 'dbname',
        'debug_level': 'debug_level',
        'mode': 'mode',
        'nowait_durable': 'nowait_durable',
        'readonly': 'readonly',
        'source_dbname': 'source_dbname',
        'version': 'version',
        'type': 'type'
    }

    def __init__(self, abort=False, actions=None, dbname='', debug_level=None, mode='OPEN', nowait_durable=False, readonly=False, source_dbname=None, version=None, type='Transaction', local_vars_configuration=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abort = None
        self._actions = None
        self._dbname = None
        self._debug_level = None
        self._mode = None
        self._nowait_durable = None
        self._readonly = None
        self._source_dbname = None
        self._version = None
        self._type = None
        self.discriminator = None

        self.abort = abort
        self.actions = actions
        self.dbname = dbname
        self.debug_level = debug_level
        self.mode = mode
        self.nowait_durable = nowait_durable
        self.readonly = readonly
        self.source_dbname = source_dbname
        self.version = version
        self.type = type

    @property
    def abort(self):
        """Gets the abort of this Transaction.  # noqa: E501


        :return: The abort of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._abort

    @abort.setter
    def abort(self, abort):
        """Sets the abort of this Transaction.


        :param abort: The abort of this Transaction.  # noqa: E501
        :type abort: bool
        """
        if self.local_vars_configuration.client_side_validation and abort is None:  # noqa: E501
            raise ValueError("Invalid value for `abort`, must not be `None`")  # noqa: E501

        self._abort = abort

    @property
    def actions(self):
        """Gets the actions of this Transaction.  # noqa: E501


        :return: The actions of this Transaction.  # noqa: E501
        :rtype: list[LabeledAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Transaction.


        :param actions: The actions of this Transaction.  # noqa: E501
        :type actions: list[LabeledAction]
        """

        self._actions = actions

    @property
    def dbname(self):
        """Gets the dbname of this Transaction.  # noqa: E501


        :return: The dbname of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._dbname

    @dbname.setter
    def dbname(self, dbname):
        """Sets the dbname of this Transaction.


        :param dbname: The dbname of this Transaction.  # noqa: E501
        :type dbname: str
        """
        if self.local_vars_configuration.client_side_validation and dbname is None:  # noqa: E501
            raise ValueError("Invalid value for `dbname`, must not be `None`")  # noqa: E501

        self._dbname = dbname

    @property
    def debug_level(self):
        """Gets the debug_level of this Transaction.  # noqa: E501


        :return: The debug_level of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._debug_level

    @debug_level.setter
    def debug_level(self, debug_level):
        """Sets the debug_level of this Transaction.


        :param debug_level: The debug_level of this Transaction.  # noqa: E501
        :type debug_level: int
        """

        self._debug_level = debug_level

    @property
    def mode(self):
        """Gets the mode of this Transaction.  # noqa: E501


        :return: The mode of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Transaction.


        :param mode: The mode of this Transaction.  # noqa: E501
        :type mode: str
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["OPEN", "CREATE", "CREATE_OVERWRITE", "OPEN_OR_CREATE", "CLONE", "CLONE_OVERWRITE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def nowait_durable(self):
        """Gets the nowait_durable of this Transaction.  # noqa: E501


        :return: The nowait_durable of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._nowait_durable

    @nowait_durable.setter
    def nowait_durable(self, nowait_durable):
        """Sets the nowait_durable of this Transaction.


        :param nowait_durable: The nowait_durable of this Transaction.  # noqa: E501
        :type nowait_durable: bool
        """
        if self.local_vars_configuration.client_side_validation and nowait_durable is None:  # noqa: E501
            raise ValueError("Invalid value for `nowait_durable`, must not be `None`")  # noqa: E501

        self._nowait_durable = nowait_durable

    @property
    def readonly(self):
        """Gets the readonly of this Transaction.  # noqa: E501


        :return: The readonly of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Transaction.


        :param readonly: The readonly of this Transaction.  # noqa: E501
        :type readonly: bool
        """
        if self.local_vars_configuration.client_side_validation and readonly is None:  # noqa: E501
            raise ValueError("Invalid value for `readonly`, must not be `None`")  # noqa: E501

        self._readonly = readonly

    @property
    def source_dbname(self):
        """Gets the source_dbname of this Transaction.  # noqa: E501


        :return: The source_dbname of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._source_dbname

    @source_dbname.setter
    def source_dbname(self, source_dbname):
        """Sets the source_dbname of this Transaction.


        :param source_dbname: The source_dbname of this Transaction.  # noqa: E501
        :type source_dbname: str
        """

        self._source_dbname = source_dbname

    @property
    def version(self):
        """Gets the version of this Transaction.  # noqa: E501


        :return: The version of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Transaction.


        :param version: The version of this Transaction.  # noqa: E501
        :type version: int
        """

        self._version = version

    @property
    def type(self):
        """Gets the type of this Transaction.  # noqa: E501


        :return: The type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.


        :param type: The type of this Transaction.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Transaction"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transaction):
            return True

        return self.to_dict() != other.to_dict()
