# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ApplAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arguments': 'list[SyntaxNode]',
        'error': 'bool',
        'missing': 'bool',
        'range': 'Range',
        'symbol': 'str'
    }

    attribute_map = {
        'arguments': 'arguments',
        'error': 'error',
        'missing': 'missing',
        'range': 'range',
        'symbol': 'symbol'
    }

    def __init__(self, arguments=None, error=False, missing=False, range=None, symbol='', local_vars_configuration=None):  # noqa: E501
        """ApplAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arguments = None
        self._error = None
        self._missing = None
        self._range = None
        self._symbol = None
        self.discriminator = None

        self.arguments = arguments
        self.error = error
        self.missing = missing
        self.range = range
        self.symbol = symbol

    @property
    def arguments(self):
        """Gets the arguments of this ApplAllOf.  # noqa: E501


        :return: The arguments of this ApplAllOf.  # noqa: E501
        :rtype: list[SyntaxNode]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ApplAllOf.


        :param arguments: The arguments of this ApplAllOf.  # noqa: E501
        :type arguments: list[SyntaxNode]
        """

        self._arguments = arguments

    @property
    def error(self):
        """Gets the error of this ApplAllOf.  # noqa: E501


        :return: The error of this ApplAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApplAllOf.


        :param error: The error of this ApplAllOf.  # noqa: E501
        :type error: bool
        """
        if self.local_vars_configuration.client_side_validation and error is None:  # noqa: E501
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def missing(self):
        """Gets the missing of this ApplAllOf.  # noqa: E501


        :return: The missing of this ApplAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this ApplAllOf.


        :param missing: The missing of this ApplAllOf.  # noqa: E501
        :type missing: bool
        """
        if self.local_vars_configuration.client_side_validation and missing is None:  # noqa: E501
            raise ValueError("Invalid value for `missing`, must not be `None`")  # noqa: E501

        self._missing = missing

    @property
    def range(self):
        """Gets the range of this ApplAllOf.  # noqa: E501


        :return: The range of this ApplAllOf.  # noqa: E501
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ApplAllOf.


        :param range: The range of this ApplAllOf.  # noqa: E501
        :type range: Range
        """
        if self.local_vars_configuration.client_side_validation and range is None:  # noqa: E501
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    @property
    def symbol(self):
        """Gets the symbol of this ApplAllOf.  # noqa: E501


        :return: The symbol of this ApplAllOf.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ApplAllOf.


        :param symbol: The symbol of this ApplAllOf.  # noqa: E501
        :type symbol: str
        """
        if self.local_vars_configuration.client_side_validation and symbol is None:  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplAllOf):
            return True

        return self.to_dict() != other.to_dict()
