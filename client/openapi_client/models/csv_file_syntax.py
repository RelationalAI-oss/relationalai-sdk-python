# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CSVFileSyntax(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'datarow': 'int',
        'delim': 'str',
        'escapechar': 'str',
        'header': 'list[str]',
        'header_row': 'int',
        'ignorerepeated': 'bool',
        'missingstrings': 'list[str]',
        'normalizenames': 'bool',
        'quotechar': 'str'
    }

    attribute_map = {
        'datarow': 'datarow',
        'delim': 'delim',
        'escapechar': 'escapechar',
        'header': 'header',
        'header_row': 'header_row',
        'ignorerepeated': 'ignorerepeated',
        'missingstrings': 'missingstrings',
        'normalizenames': 'normalizenames',
        'quotechar': 'quotechar'
    }

    def __init__(self, datarow=0, delim='', escapechar='', header=None, header_row=0, ignorerepeated=False, missingstrings=None, normalizenames=False, quotechar='', local_vars_configuration=None):  # noqa: E501
        """CSVFileSyntax - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._datarow = None
        self._delim = None
        self._escapechar = None
        self._header = None
        self._header_row = None
        self._ignorerepeated = None
        self._missingstrings = None
        self._normalizenames = None
        self._quotechar = None
        self.discriminator = None

        self.datarow = datarow
        self.delim = delim
        self.escapechar = escapechar
        self.header = header
        self.header_row = header_row
        self.ignorerepeated = ignorerepeated
        self.missingstrings = missingstrings
        self.normalizenames = normalizenames
        self.quotechar = quotechar

    @property
    def datarow(self):
        """Gets the datarow of this CSVFileSyntax.  # noqa: E501


        :return: The datarow of this CSVFileSyntax.  # noqa: E501
        :rtype: int
        """
        return self._datarow

    @datarow.setter
    def datarow(self, datarow):
        """Sets the datarow of this CSVFileSyntax.


        :param datarow: The datarow of this CSVFileSyntax.  # noqa: E501
        :type datarow: int
        """
        if self.local_vars_configuration.client_side_validation and datarow is None:  # noqa: E501
            raise ValueError("Invalid value for `datarow`, must not be `None`")  # noqa: E501

        self._datarow = datarow

    @property
    def delim(self):
        """Gets the delim of this CSVFileSyntax.  # noqa: E501


        :return: The delim of this CSVFileSyntax.  # noqa: E501
        :rtype: str
        """
        return self._delim

    @delim.setter
    def delim(self, delim):
        """Sets the delim of this CSVFileSyntax.


        :param delim: The delim of this CSVFileSyntax.  # noqa: E501
        :type delim: str
        """
        if self.local_vars_configuration.client_side_validation and delim is None:  # noqa: E501
            raise ValueError("Invalid value for `delim`, must not be `None`")  # noqa: E501

        self._delim = delim

    @property
    def escapechar(self):
        """Gets the escapechar of this CSVFileSyntax.  # noqa: E501


        :return: The escapechar of this CSVFileSyntax.  # noqa: E501
        :rtype: str
        """
        return self._escapechar

    @escapechar.setter
    def escapechar(self, escapechar):
        """Sets the escapechar of this CSVFileSyntax.


        :param escapechar: The escapechar of this CSVFileSyntax.  # noqa: E501
        :type escapechar: str
        """
        if self.local_vars_configuration.client_side_validation and escapechar is None:  # noqa: E501
            raise ValueError("Invalid value for `escapechar`, must not be `None`")  # noqa: E501

        self._escapechar = escapechar

    @property
    def header(self):
        """Gets the header of this CSVFileSyntax.  # noqa: E501


        :return: The header of this CSVFileSyntax.  # noqa: E501
        :rtype: list[str]
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this CSVFileSyntax.


        :param header: The header of this CSVFileSyntax.  # noqa: E501
        :type header: list[str]
        """

        self._header = header

    @property
    def header_row(self):
        """Gets the header_row of this CSVFileSyntax.  # noqa: E501


        :return: The header_row of this CSVFileSyntax.  # noqa: E501
        :rtype: int
        """
        return self._header_row

    @header_row.setter
    def header_row(self, header_row):
        """Sets the header_row of this CSVFileSyntax.


        :param header_row: The header_row of this CSVFileSyntax.  # noqa: E501
        :type header_row: int
        """
        if self.local_vars_configuration.client_side_validation and header_row is None:  # noqa: E501
            raise ValueError("Invalid value for `header_row`, must not be `None`")  # noqa: E501

        self._header_row = header_row

    @property
    def ignorerepeated(self):
        """Gets the ignorerepeated of this CSVFileSyntax.  # noqa: E501


        :return: The ignorerepeated of this CSVFileSyntax.  # noqa: E501
        :rtype: bool
        """
        return self._ignorerepeated

    @ignorerepeated.setter
    def ignorerepeated(self, ignorerepeated):
        """Sets the ignorerepeated of this CSVFileSyntax.


        :param ignorerepeated: The ignorerepeated of this CSVFileSyntax.  # noqa: E501
        :type ignorerepeated: bool
        """
        if self.local_vars_configuration.client_side_validation and ignorerepeated is None:  # noqa: E501
            raise ValueError("Invalid value for `ignorerepeated`, must not be `None`")  # noqa: E501

        self._ignorerepeated = ignorerepeated

    @property
    def missingstrings(self):
        """Gets the missingstrings of this CSVFileSyntax.  # noqa: E501


        :return: The missingstrings of this CSVFileSyntax.  # noqa: E501
        :rtype: list[str]
        """
        return self._missingstrings

    @missingstrings.setter
    def missingstrings(self, missingstrings):
        """Sets the missingstrings of this CSVFileSyntax.


        :param missingstrings: The missingstrings of this CSVFileSyntax.  # noqa: E501
        :type missingstrings: list[str]
        """

        self._missingstrings = missingstrings

    @property
    def normalizenames(self):
        """Gets the normalizenames of this CSVFileSyntax.  # noqa: E501


        :return: The normalizenames of this CSVFileSyntax.  # noqa: E501
        :rtype: bool
        """
        return self._normalizenames

    @normalizenames.setter
    def normalizenames(self, normalizenames):
        """Sets the normalizenames of this CSVFileSyntax.


        :param normalizenames: The normalizenames of this CSVFileSyntax.  # noqa: E501
        :type normalizenames: bool
        """
        if self.local_vars_configuration.client_side_validation and normalizenames is None:  # noqa: E501
            raise ValueError("Invalid value for `normalizenames`, must not be `None`")  # noqa: E501

        self._normalizenames = normalizenames

    @property
    def quotechar(self):
        """Gets the quotechar of this CSVFileSyntax.  # noqa: E501


        :return: The quotechar of this CSVFileSyntax.  # noqa: E501
        :rtype: str
        """
        return self._quotechar

    @quotechar.setter
    def quotechar(self, quotechar):
        """Sets the quotechar of this CSVFileSyntax.


        :param quotechar: The quotechar of this CSVFileSyntax.  # noqa: E501
        :type quotechar: str
        """
        if self.local_vars_configuration.client_side_validation and quotechar is None:  # noqa: E501
            raise ValueError("Invalid value for `quotechar`, must not be `None`")  # noqa: E501

        self._quotechar = quotechar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSVFileSyntax):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CSVFileSyntax):
            return True

        return self.to_dict() != other.to_dict()
