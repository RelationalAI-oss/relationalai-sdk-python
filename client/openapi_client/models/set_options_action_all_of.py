# coding: utf-8

"""
    Delve Client SDK

    This is a Client SDK for Delve API  # noqa: E501

    The version of the OpenAPI document: 1.1.3
    Contact: support@relational.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SetOptionsActionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abort_on_error': 'bool',
        'debug': 'bool',
        'debug_trace': 'bool',
        'silent': 'bool'
    }

    attribute_map = {
        'abort_on_error': 'abort_on_error',
        'debug': 'debug',
        'debug_trace': 'debug_trace',
        'silent': 'silent'
    }

    def __init__(self, abort_on_error=None, debug=None, debug_trace=None, silent=None, local_vars_configuration=None):  # noqa: E501
        """SetOptionsActionAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abort_on_error = None
        self._debug = None
        self._debug_trace = None
        self._silent = None
        self.discriminator = None

        self.abort_on_error = abort_on_error
        self.debug = debug
        self.debug_trace = debug_trace
        self.silent = silent

    @property
    def abort_on_error(self):
        """Gets the abort_on_error of this SetOptionsActionAllOf.  # noqa: E501


        :return: The abort_on_error of this SetOptionsActionAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._abort_on_error

    @abort_on_error.setter
    def abort_on_error(self, abort_on_error):
        """Sets the abort_on_error of this SetOptionsActionAllOf.


        :param abort_on_error: The abort_on_error of this SetOptionsActionAllOf.  # noqa: E501
        :type abort_on_error: bool
        """

        self._abort_on_error = abort_on_error

    @property
    def debug(self):
        """Gets the debug of this SetOptionsActionAllOf.  # noqa: E501


        :return: The debug of this SetOptionsActionAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this SetOptionsActionAllOf.


        :param debug: The debug of this SetOptionsActionAllOf.  # noqa: E501
        :type debug: bool
        """

        self._debug = debug

    @property
    def debug_trace(self):
        """Gets the debug_trace of this SetOptionsActionAllOf.  # noqa: E501


        :return: The debug_trace of this SetOptionsActionAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._debug_trace

    @debug_trace.setter
    def debug_trace(self, debug_trace):
        """Sets the debug_trace of this SetOptionsActionAllOf.


        :param debug_trace: The debug_trace of this SetOptionsActionAllOf.  # noqa: E501
        :type debug_trace: bool
        """

        self._debug_trace = debug_trace

    @property
    def silent(self):
        """Gets the silent of this SetOptionsActionAllOf.  # noqa: E501


        :return: The silent of this SetOptionsActionAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._silent

    @silent.setter
    def silent(self, silent):
        """Sets the silent of this SetOptionsActionAllOf.


        :param silent: The silent of this SetOptionsActionAllOf.  # noqa: E501
        :type silent: bool
        """

        self._silent = silent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetOptionsActionAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetOptionsActionAllOf):
            return True

        return self.to_dict() != other.to_dict()
